{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","props","className","style","isColored","color","onClick","value","Board","i","this","winLine","includes","squares","boardArr","tempArr","j","push","renderSquare","Component","Game","state","history","Array","fill","currentStep","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","Math","floor","step","winner","isBoardFull","current","moves","map","move","desc","fontWeight","jumpTo","status","findStatus","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fa1f9ac.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Square(props){\r\n    return (\r\n      <button className=\"square\" style={props.isColored ? {color:\"#1FC22F\"} : {}} onClick={props.onClick}>\r\n      {props.value}\r\n      </button>\r\n    );\r\n}\r\nexport default Square;","import React,{Component} from \"react\";\r\nimport Square from \"./Square\";\r\nclass Board extends Component {\r\n\r\n    renderSquare(i) {\r\n      const isColored = this.props.winLine != null && this.props.winLine[1].includes(i);\r\n      return (\r\n      <Square\r\n      key={i}\r\n      isColored={isColored}\r\n      value={this.props.squares[i]}\r\n      onClick={()=> this.props.onClick(i)}\r\n      />\r\n      );\r\n    }\r\n    \r\n    render() {\r\n        const boardArr = [];\r\n        for (let i = 0;i<3;i++){\r\n          const tempArr = [];\r\n\r\n          for (let j = 0;j<3;j++){\r\n            tempArr.push(this.renderSquare(i*3 + j));\r\n          }\r\n\r\n          boardArr.push((<div className=\"board-row\" key={i}>{tempArr}</div>));\r\n        }\r\n      return (\r\n        <div>\r\n          {boardArr}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Board","import React,{Component} from 'react'\r\nimport Board from './Board';\r\n\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares:Array(9).fill(null),\r\n                currentStep: Array(2).fill(null)\r\n            }\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            winLine:[]\r\n        }\r\n    }\r\n\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i])\r\n          return;\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n          history:history.concat([{\r\n              squares:squares,\r\n              currentStep: [Math.floor(i/3),i%3],\r\n          }]),\r\n          stepNumber: history.length,\r\n          xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n\r\n    \r\n    jumpTo(step){\r\n        this.setState(\r\n            {\r\n                stepNumber:step,\r\n                xIsNext: (step % 2) === 0,\r\n            }\r\n        );\r\n    }\r\n\r\n    findStatus(squares){\r\n      const winner = calculateWinner(squares);\r\n      if (!winner && isBoardFull(squares)){\r\n        return  \"Board is full, no one the winner\";\r\n    }\r\n    else\r\n    if (winner){\r\n       \r\n        return  `Winner: ${winner[0]}`;\r\n    }\r\n    else{\r\n        return `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    }\r\n\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const moves = history.map((step, move)=>{\r\n            const desc = move ?\r\n            `Go to move #${move} ${move % 2 === 1 ? \"X\" : \"O\" }(${step.currentStep[0]+1},${step.currentStep[1]+1})` :\r\n            `Go to game start`;\r\n\r\n            return (\r\n              <li key={move}>\r\n                  <button style={this.state.stepNumber === move ? {fontWeight:\"bold\"} : {}} onClick={()=>this.jumpTo(move)}>{desc}</button>\r\n              </li>\r\n          );\r\n\r\n          \r\n        });\r\n\r\n      let status = this.findStatus(current.squares);\r\n      \r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board squares={current.squares} winLine={calculateWinner(current.squares)} onClick={(i)=>this.handleClick(i)}/>\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Game;\r\n  \r\n\r\n\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return [squares[a],[a,b,c]];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  function isBoardFull(squares){\r\n      for (const square of squares){\r\n          if (!square)\r\n            return false;\r\n      }\r\n      return true;\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Game'\r\n  \r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}